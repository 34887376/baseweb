<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">

	<bean id="dataSourceWriteForTopic" parent="parentDataSource">
		<property name="driverClassName" value="${jdbc.topic.driver}" />
		<property name="url" value="${jdbc.topic.url}" />
		<property name="username" value="${jdbc.topic.username}" />
		<property name="password" value="${jdbc.topic.password}" />
	</bean>
	
	<bean id="dataSourceReadForTopic" parent="parentDataSource">
		<property name="driverClassName" value="${jdbc.topic.driver}" />
		<property name="url" value="${jdbc.topic.url}" />
		<property name="username" value="${jdbc.topic.username}" />
		<property name="password" value="${jdbc.topic.password}" />
	</bean>

	<bean id="sqlMapClientForTopic" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocation" value="classpath:sqlmap-config.xml" />
		<property name="dataSource" ref="dataSourceWriteForTopic" />
	</bean>
	
	<!-- 配置话题数据库下分库分表的读写数据源 start   -->
	<bean id="topicReadDataSource"
			class="com.jd.sharding.client.datasource.DefaultMultiDataSourcesService">
			<property name="dataSourcePool">
				<map>
					<!-- key值前缀和TableConfig中配置的数据库前缀保持一致 -->
					<entry key="kaopu_topicdb0" value-ref="dataSourceReadForTopic" />
				</map>
			</property>
	</bean>
	<bean id="topicWriteDataSource"
			class="com.jd.sharding.client.datasource.DefaultMultiDataSourcesService">
			<property name="dataSourcePool">
				<map>
					<!-- key值前缀和TableConfig中配置的数据库前缀保持一致 -->
					<entry key="kaopu_topicdb0" value-ref="dataSourceWriteForTopic" />
				</map>
			</property>
	</bean>
	<!-- 配置话题数据库下分库分表的读写数据源 end   -->
	
	
<!-- ########################################话题摘要分库分表配置 start ################################################# -->
	<!-- 水平切分数据库的路由规则  start-->
	<bean id="topicAbstractTableConfig" class="com.jd.sharding.client.config.TableConfig">
		<!--MultipleDataSourcesService里面的key的前缀，如需要后缀，可以设置dbIndexSuffix属性 -->
		<property name="dbIndexPrefix" value="kaopu_topicdb" />
		<!-- 分库的库的个数  -->
		<property name="dbCount" value="1" />
		<!-- 物理表名的前缀，如需要后缀，可以设置tbNameSuffix属性 -->
		<property name="tbNamePrefix" value="topic_abstract" />
		<!--  分表后的表的张数-->
		<property name="tableCount" value="4" />
		<!--  分库分表的字段名，通过反射从parameterObject中获取 -->
		<property name="routeField" value="_id" />
		<!--  需要传给ibatis引擎的物理表名的字段，通过反射往parameterObject中写入 -->
		<property name="tabNameField" value="tableName" />
		<!--  路由规则，目前提供了简单的取模求余方式，如果分库的字段是字符串，会先用murmurhash计算hash值  -->
		<property name="routeRule">
			<bean class="com.jd.sharding.client.rule.SimpleRouteRule">
				<!--  分库的库的个数  -->
				<constructor-arg index="0" value="1" />
				<!--  分表后的表的张数-->
				<constructor-arg index="1" value="4" />
			</bean>
		</property>
	</bean>
	
	<bean id="topicAbstractRouter" class="com.jd.sharding.client.router.SimpleRouter">
		<property name="shardConfig">
			<bean class="com.jd.sharding.client.config.ShardConfig">
				<property name="tableConfig">
					<map>
						<!--  key为逻辑表名   -->
						<entry key="topic_abstract" value-ref="topicAbstractTableConfig" />
					</map>
				</property>
			</bean>
		</property>
	</bean>
	<!-- 水平切分数据库的路由规则  end-->

	<!-- 话题摘要写库分库分表数据配置 start -->
	<bean id="topicAbstractWriteShardJdbcTemplate" class="com.jd.sharding.client.SimpleShardJdbcTemplate">
		<property name="logicalTabName" value="topic_abstract" />
		<property name="sqlMapClient" ref="sqlMapClientForTopic" />
		<property name="dataSourcesService" ref="topicWriteDataSource" />
		<property name="router" ref="topicAbstractRouter" />
		<property name="dataSource" ref="dataSourceWriteForTopic"></property>
	</bean>
	<!-- 话题摘要写库分库分表数据配置 end -->
	
	
   <!-- 话题摘要读库水平切分的数据库模板配置  start -->
	<bean id="topicAbstractReadShardJdbcTemplate" class="com.jd.sharding.client.SimpleShardJdbcTemplate">
		<property name="logicalTabName" value="topic_abstract" />
		<property name="sqlMapClient" ref="sqlMapClientForTopic" />
		<property name="dataSourcesService" ref="topicReadDataSource" />
		<property name="router" ref="topicAbstractRouter" />
		<property name="dataSource" ref="dataSourceReadForTopic"></property>
	</bean>
	 <!-- 话题摘要读库水平切分的数据库模板配置  end -->
<!-- ########################################话题摘要分库分表配置 end ################################################# -->   

<!-- ########################################话题内容分库分表配置 start ################################################# -->
	<!-- 水平切分数据库的路由规则  start-->
	<bean id="topicContentTableConfig" class="com.jd.sharding.client.config.TableConfig">
		<!--MultipleDataSourcesService里面的key的前缀，如需要后缀，可以设置dbIndexSuffix属性 -->
		<property name="dbIndexPrefix" value="kaopu_topicdb" />
		<!-- 分库的库的个数  -->
		<property name="dbCount" value="1" />
		<!-- 物理表名的前缀，如需要后缀，可以设置tbNameSuffix属性 -->
		<property name="tbNamePrefix" value="topic_content" />
		<!--  分表后的表的张数-->
		<property name="tableCount" value="4" />
		<!--  分库分表的字段名，通过反射从parameterObject中获取 -->
		<property name="routeField" value="_id" />
		<!--  需要传给ibatis引擎的物理表名的字段，通过反射往parameterObject中写入,写sql时的表名变量 -->
		<property name="tabNameField" value="tableName" />
		<!--  路由规则，目前提供了简单的取模求余方式，如果分库的字段是字符串，会先用murmurhash计算hash值  -->
		<property name="routeRule">
			<bean class="com.jd.sharding.client.rule.SimpleRouteRule">
				<!--  分库的库的个数  -->
				<constructor-arg index="0" value="1" />
				<!--  分表后的表的张数-->
				<constructor-arg index="1" value="4" />
			</bean>
		</property>
	</bean>
	
	<bean id="topicContentRouter" class="com.jd.sharding.client.router.SimpleRouter">
		<property name="shardConfig">
			<bean class="com.jd.sharding.client.config.ShardConfig">
				<property name="tableConfig">
					<map>
						<!--  key为逻辑表名   -->
						<entry key="topic_content" value-ref="topicContentTableConfig" />
					</map>
				</property>
			</bean>
		</property>
	</bean>
	<!-- 水平切分数据库的路由规则  end-->

	<!-- 话题内容写库分库分表数据配置 start -->

	<bean id="topicContentWriteShardJdbcTemplate" class="com.jd.sharding.client.SimpleShardJdbcTemplate">
		<property name="logicalTabName" value="topic_content" />
		<property name="sqlMapClient" ref="sqlMapClientForTopic" />
		<property name="dataSourcesService" ref="topicWriteDataSource" />
		<property name="router" ref="topicContentRouter" />
		<property name="dataSource" ref="dataSourceWriteForTopic"></property>
	</bean>
	<!-- 话题内容写库分库分表数据配置 end -->
	
	
   <!-- 话题内容读库水平切分的数据库模板配置  start -->
	
	<bean id="topicContentReadShardJdbcTemplate" class="com.jd.sharding.client.SimpleShardJdbcTemplate">
		<property name="logicalTabName" value="topic_content" />
		<property name="sqlMapClient" ref="sqlMapClientForTopic" />
		<property name="dataSourcesService" ref="topicReadDataSource" />
		<property name="router" ref="topicContentRouter" />
		<property name="dataSource" ref="dataSourceReadForTopic"></property>
	</bean>
	 <!-- 话题内容读库水平切分的数据库模板配置  end -->
<!-- ########################################话题内容分库分表配置 end ################################################# -->   

<!-- ########################################用户话题表分库分表配置 start ################################################# -->
	<!-- 水平切分数据库的路由规则  start-->
	<bean id="userTopicTableConfig" class="com.jd.sharding.client.config.TableConfig">
		<!--MultipleDataSourcesService里面的key的前缀，如需要后缀，可以设置dbIndexSuffix属性 -->
		<property name="dbIndexPrefix" value="kaopu_topicdb" />
		<!-- 分库的库的个数  -->
		<property name="dbCount" value="1" />
		<!-- 物理表名的前缀，如需要后缀，可以设置tbNameSuffix属性 -->
		<property name="tbNamePrefix" value="user_topic_relation" />
		<!--  分表后的表的张数-->
		<property name="tableCount" value="4" />
		<!--  分库分表的字段名，通过反射从parameterObject中获取 -->
		<property name="routeField" value="pin" />
		<!--  需要传给ibatis引擎的物理表名的字段，通过反射往parameterObject中写入,写sql时的表名变量 -->
		<property name="tabNameField" value="tableName" />
		<!--  路由规则，目前提供了简单的取模求余方式，如果分库的字段是字符串，会先用murmurhash计算hash值  -->
		<property name="routeRule">
			<bean class="com.jd.sharding.client.rule.SimpleRouteRule">
				<!--  分库的库的个数  -->
				<constructor-arg index="0" value="1" />
				<!--  分表后的表的张数-->
				<constructor-arg index="1" value="4" />
			</bean>
		</property>
	</bean>
	
	<bean id="userTopicRouter" class="com.jd.sharding.client.router.SimpleRouter">
		<property name="shardConfig">
			<bean class="com.jd.sharding.client.config.ShardConfig">
				<property name="tableConfig">
					<map>
						<!--  key为逻辑表名   -->
						<entry key="user_topic_relation" value-ref="userTopicTableConfig" />
					</map>
				</property>
			</bean>
		</property>
	</bean>
	<!-- 水平切分数据库的路由规则  end-->

	<!-- 用户话题表写库分库分表数据配置 start -->
	<bean id="userTopicWriteShardJdbcTemplate" class="com.jd.sharding.client.SimpleShardJdbcTemplate">
		<property name="logicalTabName" value="user_topic_relation" />
		<property name="sqlMapClient" ref="sqlMapClientForTopic" />
		<property name="dataSourcesService" ref="topicWriteDataSource" />
		<property name="router" ref="userTopicRouter" />
		<property name="dataSource" ref="dataSourceWriteForTopic"></property>
	</bean>
	<!-- 用户话题表写库分库分表数据配置 end -->
	
	
   <!-- 用户话题表读库水平切分的数据库模板配置  start -->
	<bean id="userTopicReadShardJdbcTemplate" class="com.jd.sharding.client.SimpleShardJdbcTemplate">
		<property name="logicalTabName" value="user_topic_relation" />
		<property name="sqlMapClient" ref="sqlMapClientForTopic" />
		<property name="dataSourcesService" ref="topicReadDataSource" />
		<property name="router" ref="userTopicRouter" />
		<property name="dataSource" ref="dataSourceReadForTopic"></property>
	</bean>
	 <!-- 用户话题表读库水平切分的数据库模板配置  end -->
<!-- ########################################用户话题表分库分表配置 end ################################################# -->   


<!-- ########################################标签话题表分库分表配置 start ################################################# -->
	<!-- 水平切分数据库的路由规则  start-->
	<bean id="markTopicTableConfig" class="com.jd.sharding.client.config.TableConfig">
		<!--MultipleDataSourcesService里面的key的前缀，如需要后缀，可以设置dbIndexSuffix属性 -->
		<property name="dbIndexPrefix" value="kaopu_topicdb" />
		<!-- 分库的库的个数  -->
		<property name="dbCount" value="1" />
		<!-- 物理表名的前缀，如需要后缀，可以设置tbNameSuffix属性 -->
		<property name="tbNamePrefix" value="mark_topic_relation" />
		<!--  分表后的表的张数-->
		<property name="tableCount" value="4" />
		<!--  分库分表的字段名，通过反射从parameterObject中获取 -->
		<property name="routeField" value="markId" />
		<!--  需要传给ibatis引擎的物理表名的字段，通过反射往parameterObject中写入,写sql时的表名变量 -->
		<property name="tabNameField" value="tableName" />
		<!--  路由规则，目前提供了简单的取模求余方式，如果分库的字段是字符串，会先用murmurhash计算hash值  -->
		<property name="routeRule">
			<bean class="com.jd.sharding.client.rule.SimpleRouteRule">
				<!--  分库的库的个数  -->
				<constructor-arg index="0" value="1" />
				<!--  分表后的表的张数-->
				<constructor-arg index="1" value="4" />
			</bean>
		</property>
	</bean>
	
	<bean id="markTopicRouter" class="com.jd.sharding.client.router.SimpleRouter">
		<property name="shardConfig">
			<bean class="com.jd.sharding.client.config.ShardConfig">
				<property name="tableConfig">
					<map>
						<!--  key为逻辑表名   -->
						<entry key="mark_topic_relation" value-ref="markTopicTableConfig" />
					</map>
				</property>
			</bean>
		</property>
	</bean>
	<!-- 水平切分数据库的路由规则  end-->

	<!-- 标签话题表写库分库分表数据配置 start -->
	<bean id="markTopicWriteShardJdbcTemplate" class="com.jd.sharding.client.SimpleShardJdbcTemplate">
		<property name="logicalTabName" value="mark_topic_relation" />
		<property name="sqlMapClient" ref="sqlMapClientForTopic" />
		<property name="dataSourcesService" ref="topicWriteDataSource" />
		<property name="router" ref="markTopicRouter" />
		<property name="dataSource" ref="dataSourceWriteForTopic"></property>
	</bean>
	<!-- 标签话题表写库分库分表数据配置 end -->
	
	
   <!-- 标签话题表读库水平切分的数据库模板配置  start -->
	<bean id="markTopicReadShardJdbcTemplate" class="com.jd.sharding.client.SimpleShardJdbcTemplate">
		<property name="logicalTabName" value="mark_topic_relation" />
		<property name="sqlMapClient" ref="sqlMapClientForTopic" />
		<property name="dataSourcesService" ref="topicReadDataSource" />
		<property name="router" ref="markTopicRouter" />
		<property name="dataSource" ref="dataSourceReadForTopic"></property>
	</bean>
	 <!-- 标签话题表读库水平切分的数据库模板配置  end -->
<!-- ########################################标签话题表分库分表配置 end ################################################# -->   

</beans>