<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">
	<!-- 配置点赞数据库下分库分表的读写数据源 start -->
	<bean id="dataSourceRead_praise" parent="parentDataSource">
		<property name="driverClassName" value="${jdbc.praise.driver}" />
		<property name="url" value="${jdbc.praise.url}" />
		<property name="username" value="${jdbc.praise.username}" />
		<property name="password" value="${jdbc.praise.password}" />
	</bean>
		<bean id="dataSourceWrite_praise" parent="parentDataSource">
		<property name="driverClassName" value="${jdbc.praise.driver}" />
		<property name="url" value="${jdbc.praise.url}" />
		<property name="username" value="${jdbc.praise.username}" />
		<property name="password" value="${jdbc.praise.password}" />
	</bean>

	<bean id="praiseSqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocation" value="classpath:sqlmap-config.xml" />
		<property name="dataSource" ref="dataSourceWrite_praise" />
	</bean>
	<bean id="praiseSqlMapClientTemplate" class="org.springframework.orm.ibatis.SqlMapClientTemplate">
		<property name="sqlMapClient" ref="praiseSqlMapClient"></property>
	</bean>

	<!-- 配置话题数据库下分库分表的读写数据源 start -->
	<bean id="praiseReadDataSource"
		class="com.jd.sharding.client.datasource.DefaultMultiDataSourcesService">
		<property name="dataSourcePool">
			<map>
				<!-- key值前缀和TableConfig中配置的数据库前缀保持一致 -->
				<!-- <entry key="praise_db0" value-ref="dataSourceRead_praise" /> -->
				<entry key="kaopu_praisedb0" value-ref="dataSourceRead_praise" />
			</map>
		</property>
	</bean>
	<bean id="praiseWriteDataSource"
		class="com.jd.sharding.client.datasource.DefaultMultiDataSourcesService">
		<property name="dataSourcePool">
			<map>
				<!-- key值前缀和TableConfig中配置的数据库前缀保持一致 -->
				<!-- <entry key="praise_db0" value-ref="dataSourceWrite_praise" /> -->
				<entry key="kaopu_praisedb0" value-ref="dataSourceWrite_praise" />
			</map>
		</property>
	</bean>
	<!-- 配置点赞数据库下分库分表的读写数据源 end -->
	<!-- ########################################原始点赞分库分表配置 start ################################################# -->
	<!-- 水平切分数据库的路由规则 start -->
	<bean id="praiseOriginTableConfig" class="com.jd.sharding.client.config.TableConfig">
		<!--MultipleDataSourcesService里面的key的前缀，如需要后缀，可以设置dbIndexSuffix属性 -->
		<property name="dbIndexPrefix" value="kaopu_praisedb" />
		<!-- <property name="dbIndexPrefix" value="praise_db" /> -->
		<!-- 分库的库的个数 -->
		<property name="dbCount" value="1" />
		<!-- 物理表名的前缀，如需要后缀，可以设置tbNameSuffix属性 -->
		<property name="tbNamePrefix" value="praise_origin" />
		<!-- 分表后的表的张数 -->
		<property name="tableCount" value="5" />
		<!-- 分库分表的字段名，通过反射从parameterObject中获取 -->
		<property name="routeField" value="_id" />
		<!-- 需要传给ibatis引擎的物理表名的字段，通过反射往parameterObject中写入 -->
		<property name="tabNameField" value="tableName" />
		<!-- 路由规则，目前提供了简单的取模求余方式，如果分库的字段是字符串，会先用murmurhash计算hash值 -->
		<property name="routeRule">
			<bean class="com.jd.sharding.client.rule.SimpleRouteRule">
				<!-- 分库的库的个数 -->
				<constructor-arg index="0" value="1" />
				<!-- 分表后的表的张数 -->
				<constructor-arg index="1" value="5" />
			</bean>
		</property>
	</bean>

	<bean id="praiseOriginRouter" class="com.jd.sharding.client.router.SimpleRouter">
		<property name="shardConfig">
			<bean class="com.jd.sharding.client.config.ShardConfig">
				<property name="tableConfig">
					<map>
						<!-- key为逻辑表名 -->
						<entry key="praise_origin" value-ref="praiseOriginTableConfig" />
					</map>
				</property>
			</bean>
		</property>
	</bean>
	<!-- 水平切分数据库的路由规则 end -->

	<!-- 原始点赞写库分库分表数据配置 start -->
	<bean id="praiseOriginWriteShardJdbcTemplate" class="com.jd.sharding.client.SimpleShardJdbcTemplate">
		<property name="logicalTabName" value="praise_origin" />
		<property name="sqlMapClient" ref="sqlMapClient" />
		<property name="dataSourcesService" ref="praiseWriteDataSource" />
		<property name="router" ref="praiseOriginRouter" />
		<property name="dataSource" ref="dataSourceWrite_praise"></property>
	</bean>
	<!-- 原始点赞写库分库分表数据配置 end -->


	<!-- 原始点赞读库水平切分的数据库模板配置 start -->
	<bean id="praiseOriginReadShardJdbcTemplate" class="com.jd.sharding.client.SimpleShardJdbcTemplate">
		<property name="logicalTabName" value="praise_origin" />
		<property name="sqlMapClient" ref="sqlMapClient" />
		<property name="dataSourcesService" ref="praiseReadDataSource" />
		<property name="router" ref="praiseOriginRouter" />
		<property name="dataSource" ref="dataSourceRead_praise"></property>
	</bean>
	<!-- 原始点赞读库水平切分的数据库模板配置 end -->
	<!-- ########################################原始点赞分库分表配置 end ################################################# -->

	<!-- ########################################话题点赞分库分表配置 start ################################################# -->
	<!-- 水平切分数据库的路由规则 start -->
	<bean id="praiseTopicTableConfig" class="com.jd.sharding.client.config.TableConfig">
		<!--MultipleDataSourcesService里面的key的前缀，如需要后缀，可以设置dbIndexSuffix属性 -->
		<property name="dbIndexPrefix" value="kaopu_praisedb" />
		<!-- <property name="dbIndexPrefix" value="praise_db" /> -->
		<!-- 分库的库的个数 -->
		<property name="dbCount" value="1" />
		<!-- 物理表名的前缀，如需要后缀，可以设置tbNameSuffix属性 -->
		<property name="tbNamePrefix" value="praise_topic" />
		<!-- 分表后的表的张数 -->
		<property name="tableCount" value="5" />
		<!-- 分库分表的字段名，通过反射从parameterObject中获取 -->
		<property name="routeField" value="topicId" />
		<!-- 需要传给ibatis引擎的物理表名的字段，通过反射往parameterObject中写入 -->
		<property name="tabNameField" value="tableName" />
		<!-- 路由规则，目前提供了简单的取模求余方式，如果分库的字段是字符串，会先用murmurhash计算hash值 -->
		<property name="routeRule">
			<bean class="com.jd.sharding.client.rule.SimpleRouteRule">
				<!-- 分库的库的个数 -->
				<constructor-arg index="0" value="1" />
				<!-- 分表后的表的张数 -->
				<constructor-arg index="1" value="5" />
			</bean>
		</property>
	</bean>

	<bean id="praiseTopicRouter" class="com.jd.sharding.client.router.SimpleRouter">
		<property name="shardConfig">
			<bean class="com.jd.sharding.client.config.ShardConfig">
				<property name="tableConfig">
					<map>
						<!-- key为逻辑表名 -->
						<entry key="praise_topic" value-ref="praiseTopicTableConfig" />
					</map>
				</property>
			</bean>
		</property>
	</bean>
	<!-- 水平切分数据库的路由规则 end -->

	<!-- 话题点赞写库分库分表数据配置 start -->
	<bean id="praiseTopicWriteShardJdbcTemplate" class="com.jd.sharding.client.SimpleShardJdbcTemplate">
		<property name="logicalTabName" value="praise_topic" />
		<property name="sqlMapClient" ref="sqlMapClient" />
		<property name="dataSourcesService" ref="praiseWriteDataSource" />
		<property name="router" ref="praiseTopicRouter" />
		<property name="dataSource" ref="dataSourceWrite_praise"></property>
	</bean>
	<!-- 话题点赞写库分库分表数据配置 end -->


	<!-- 话题点赞读库水平切分的数据库模板配置 start -->
	<bean id="praiseTopicReadShardJdbcTemplate" class="com.jd.sharding.client.SimpleShardJdbcTemplate">
		<property name="logicalTabName" value="praise_topic" />
		<property name="sqlMapClient" ref="sqlMapClient" />
		<property name="dataSourcesService" ref="praiseReadDataSource" />
		<property name="router" ref="praiseTopicRouter" />
		<property name="dataSource" ref="dataSourceRead_praise"></property>
	</bean>
	<!-- 话题点赞读库水平切分的数据库模板配置 end -->
	<!-- ########################################话题点赞分库分表配置 end ################################################# -->

	<!-- ########################################用户点赞分库分表配置 start ################################################# -->
	<!-- 水平切分数据库的路由规则 start -->
	<bean id="praiseUserTableConfig" class="com.jd.sharding.client.config.TableConfig">
		<!--MultipleDataSourcesService里面的key的前缀，如需要后缀，可以设置dbIndexSuffix属性 -->
		<property name="dbIndexPrefix" value="kaopu_praisedb" />
		<!-- <property name="dbIndexPrefix" value="praise_db" /> -->
		<!-- 分库的库的个数 -->
		<property name="dbCount" value="1" />
		<!-- 物理表名的前缀，如需要后缀，可以设置tbNameSuffix属性 -->
		<property name="tbNamePrefix" value="praise_user" />
		<!-- 分表后的表的张数 -->
		<property name="tableCount" value="5" />
		<!-- 分库分表的字段名，通过反射从parameterObject中获取 -->
		<property name="routeField" value="pin" />
		<!-- 需要传给ibatis引擎的物理表名的字段，通过反射往parameterObject中写入 -->
		<property name="tabNameField" value="tableName" />
		<!-- 路由规则，目前提供了简单的取模求余方式，如果分库的字段是字符串，会先用murmurhash计算hash值 -->
		<property name="routeRule">
			<bean class="com.jd.sharding.client.rule.SimpleRouteRule">
				<!-- 分库的库的个数 -->
				<constructor-arg index="0" value="1" />
				<!-- 分表后的表的张数 -->
				<constructor-arg index="1" value="5" />
			</bean>
		</property>
	</bean>

	<bean id="praiseUserTopicRouter" class="com.jd.sharding.client.router.SimpleRouter">
		<property name="shardConfig">
			<bean class="com.jd.sharding.client.config.ShardConfig">
				<property name="tableConfig">
					<map>
						<!-- key为逻辑表名 -->
						<entry key="praise_user" value-ref="praiseUserTableConfig" />
					</map>
				</property>
			</bean>
		</property>
	</bean>
	<!-- 水平切分数据库的路由规则 end -->

	<!-- 话题点赞写库分库分表数据配置 start -->
	<bean id="praiseUserWriteShardJdbcTemplate" class="com.jd.sharding.client.SimpleShardJdbcTemplate">
		<property name="logicalTabName" value="praise_user" />
		<property name="sqlMapClient" ref="sqlMapClient" />
		<property name="dataSourcesService" ref="praiseWriteDataSource" />
		<property name="router" ref="praiseUserTopicRouter" />
		<property name="dataSource" ref="dataSourceWrite_praise"></property>
	</bean>
	<!-- 话题点赞写库分库分表数据配置 end -->


	<!-- 话题点赞读库水平切分的数据库模板配置 start -->
	<bean id="praiseUserReadShardJdbcTemplate" class="com.jd.sharding.client.SimpleShardJdbcTemplate">
		<property name="logicalTabName" value="praise_user" />
		<property name="sqlMapClient" ref="sqlMapClient" />
		<property name="dataSourcesService" ref="praiseReadDataSource" />
		<property name="router" ref="praiseUserTopicRouter" />
		<property name="dataSource" ref="dataSourceRead_praise"></property>
	</bean>
	<!-- 话题点赞读库水平切分的数据库模板配置 end -->
	<!-- ########################################用户点赞分库分表配置 end ################################################# -->

</beans>